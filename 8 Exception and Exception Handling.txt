Exception :-
	In Java, an exception is an event ( or we can say abnormal event) that disrupts the normal flow of the program. 
	It is an object which is thrown at runtime.
	
	
Exception Handling in Java is one of the effective means to handle the runtime errors 
so that the regular flow of the application can be preserved. 
Java Exception Handling is a mechanism to handle runtime errors such as 
ClassNotFoundException, IOException, SQLException, RemoteException, etc.

Exception is an unwanted or unexpected event, which occurs during the execution of a program, 
i.e. at run time, that disrupts the normal flow of the program’s instructions. 
Exceptions can be caught and handled by the program. 
When an exception occurs within a method, it creates an object. 
This object is called the exception object. 
It contains information about the exception, such as the name and description of the exception 
and the state of the program when the exception occurred.	


ERROR :- 
Errors represent irrecoverable conditions such as Java virtual machine (JVM) running out of memory, 
memory leaks, stack overflow errors, 
library incompatibility, infinite recursion, etc. 
Errors are usually beyond the control of the programmer, and we should not try to handle errors.




Three types of exceptions as per Oracle :- 

1) Checked Exception
The classes that directly inherit the Throwable/Exception class except RuntimeException and 
Error are known as checked exceptions. 
For example, IOException, SQLException, etc. Checked exceptions are checked at compile-time.

2) Unchecked Exception
The classes that inherit the RuntimeException are known as unchecked exceptions. 
For example, ArithmeticException, NullPointerException, ArrayIndexOutOfBoundsException, etc. 
Unchecked exceptions are not checked at compile-time.

3) Error
Error is irrecoverable. Some example of errors are 
OutOfMemoryError, VirtualMachineError, AssertionError etc.


*Exception Hierarchy:- Refer to image.




1. try		-->  The "try" keyword is used to specify a block where we should place an exception code. It means we can't use try block alone. The try block must be followed by either catch or finally.
2. catch	-->  The "catch" block is used to handle the exception. It must be preceded by try block which means we can't use catch block alone. It can be followed by finally block later.
3.finally		-->  The "finally" block is used to execute the necessary code of the program. It is executed whether an exception is handled or not. 	
4.throw	    -->  The "throw" keyword is used to throw an exception.
5.throws	    -->  The "throws" keyword is used to declare exceptions. It specifies that there may occur an exception in the method. It doesn't throw an exception. It is always used with method signature.







How Does JVM handle an Exception?
Default Exception Handling: Whenever inside a method, if an exception has occurred, the method creates an Object known as an Exception Object and hands it off to the run-time system(JVM). The exception object contains the name and description of the exception and the current state of the program where the exception has occurred. 
Creating the Exception Object and handling it in the run-time system is called throwing an Exception. 
There might be a list of the methods that had been called to get to the method where an exception occurred. 
This ordered list of the methods is called Call Stack. Now the following procedure will happen. 


The run-time system searches the call stack to find the method that contains a block of code that can handle the occurred exception. The block of the code is called an Exception handler.
The run-time system starts searching from the method in which the exception occurred, and proceeds through the call stack in the reverse order in which methods were called.
If it finds an appropriate handler, then it passes the occurred exception to it. An appropriate handler means the type of the exception object thrown matches the type of the exception object it can handle.
If the run-time system searches all the methods on the call stack and couldn’t have found the appropriate handler, then the run-time system handover the Exception Object to the default exception handler, which is part of the run-time system. This handler prints the exception information in the following format and terminates the program abnormally.
Exception in thread "xxx" Name of Exception : Description
... ...... ..  // Call Stack


Exception Handling using try catch :-

try{
		Exception prone code
}catch(ExceptionType e){
		//Handling code incase of exception occurred
}



Difference between throw and throws keyword.
Research about creating our own CustomException and show me its example.


1. Always catch the specific exception in catch block.
	try {
			File related operations  which might throw FileNotFoundException
		}
	catch(Exception e){                             /// this is not recommended
		//handling code
	}
	
	Correct way 
	try {
			File related operations  which might throw FileNotFoundException
		}
	catch(FileNotFoundException e){                             /// this is recommended
		//handling code
	}



2. Multiple catch blocks and they are having same handlign in case of exception occurs:-

	try {
			File related operations  which might throw FileNotFoundException or IOException
		}
	catch(Exception e){                             /// this is not recommended
		//handling code
	}


	Recommended way :-
	try {
			File related operations  which might throw FileNotFoundException or IOException
		}
	catch(FileNotFoundException || IOException exc){                            
		//handling code
	}
	
	
2. Multiple catch blocks and they are having different handling in case of exception occurs:-

	try {
			File related operations  which might throw FileNotFoundException or IOException
		}
	catch(FileNotFoundException e){                            
		System.out.println("File is not found so no further operation can be performed");
		return;   
	}catch(IOException e){
		System.out.println("IOException occurred, will go with further processing");
	}



3. Multiple catch block but exceptions having parent-child relationship.

	try {
			File related operations  which might throw FileNotFoundException
		}
	catch(Exception){
			/// Custom handling
	}
	catch(FileNotFoundException e){                            
		System.out.println("File is not found so no further operation can be performed");
		return;   
	}
	
	This is invalid since Exception is parent of FileNotFoundException.
	Specific exception must be handled first and then generic exception must be handled.
	
	
	
finally :-

public static void main(String[] args) {
	
	try {
		System.out.println("Line 1 in side try");
		int x = 100/0;
		Files.delete(Paths.get("", "text.txt"));    //IOException
		System.out.println("Line 2 in side try");
		System.out.println("Line 3 in side try");
		return;
	}catch(IOException iE) {
		System.out.println("IOException:- File was not present");
	}
	catch(Exception e) {
		System.out.println("Exception :- Some exceptio occured" + e.getMessage());
		//return ;
	}
	finally {
		System.out.println("Finally block executing");
		// This block will be executed whether there is an exception occured or not !
		//Clean up / necessary code
		//eg. file close, jdbc connection 
	}
	
	//outside try catch
	System.out.println("Outside try catch block");
	
	}
	
	
	
3 try with resources :- 

	//We will study it in file lectures.
	// Using try-with-resources
		try (FileOutputStream fileOutputStream = new FileOutputStream("abc.txt")) {
			fileOutputStream.write(9);
			System.out.println("Message written to file successfuly!");
		} catch (Exception exception) {
			System.out.println(exception);
		}
		
		


---------------------------------------------------------------------------------------------------------